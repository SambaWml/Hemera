/* eslint-disable unicorn/filename-case, jsdoc/require-returns, jsdoc/require-param-description, jsdoc/require-param-type, @typescript-eslint/explicit-function-return-type */
import 'cypress-file-upload';
import { format } from 'date-fns';

/**
 * Função para formatar uma data no formato "YYYY-MM-DD".
 * @param data
 */
const formatarData = (data) => {
  const dia = String(data.getDate()).padStart(2, '0');
  const mes = String(data.getMonth() + 1).padStart(2, '0'); // Meses começam em 0
  const ano = data.getFullYear();

  return `${ano}-${mes}-${dia}`;
};

/**
 * Gera as datas de emissão e vencimento.
 * A data de vencimento é 30 dias após a data de emissão.
 */
const gerarDatas = () => {
  const hoje = new Date();
  const dataEmissao = formatarData(hoje);

  hoje.setDate(hoje.getDate() + 30);

  const dataVencimento = formatarData(hoje);

  return { dataEmissao, dataVencimento };
};

/**
 * Gera um número aleatório dentro de um intervalo especificado.
 * @param min
 * @param max
 */
const gerarNumeroAleatorio = (min, max) =>
  Math.floor(Math.random() * (max - min + 1)) + min;

/**
 * Configurações iniciais de dados usados nos testes.
 */
const { dataEmissao, dataVencimento } = gerarDatas();
const dados = {
  investidor: '19.187.295/0001-85',
  emissor: '54.732.722/0001-60',
  numeroNC: `3284 ${format(new Date(), 'd Haaa m s')}`,
  descricaoNC: 'Uma descrição só pra testar.',
  serieNc: `Dia ${format(new Date(), 'd')}`,
  valorTotal: '10.000',
  valorUnitario: '1.000',
  quantidade: '10',
  jurosPre: '100',
  jurosPos: '200',
  nomeDaNota: 'Davi | Teste 02',
  taxa01: gerarNumeroAleatorio(0, 80000).toString(),
  taxa02: gerarNumeroAleatorio(0, 80000).toString(),
  taxa03: gerarNumeroAleatorio(0, 80000).toString(),
};

/**
 * Comando para realizar login.
 */
Cypress.Commands.add(
  'login',
  (userName = 'davi.valerio@luby.software', password = '123123') => {
    cy.visit('http://localhost:3000/');
    cy.contains('Fazer login com Keycloak').click();
    cy.get('#username').type(userName);
    cy.get('#password').type(password);
    cy.get('#kc-login').click();
    cy.contains('Modelo de Nota Comercial').should('be.visible');
  }
);

/**
 * Comando para acessar a tela de Cadastro de NC.
 */
Cypress.Commands.add('visualizarTelaDeCadastroNC', () => {
  cy.get('[href="/commercial-note/register"] > .truncate').click();
  cy.contains('Cadastro NC').should('be.visible');
});

/**
 * Preenche os campos do cabeçalho de uma NC.
 */
Cypress.Commands.add('preencherCabecalho', () => {
  cy.intercept(
    'GET',
    'https://hemera.backend.oke.luby.me/api/v1/zheus/investidores*'
  ).as('LoadInvestor');
  cy.get('[data-test="header.cnpjSearchInvestor-input"]').type(
    dados.investidor
  );
  cy.wait('@LoadInvestor').its('response.statusCode').should('eq', 200);

  cy.intercept(
    'GET',
    'https://hemera.backend.oke.luby.me/api/v1/zheus/emissores*'
  ).as('LoadEmitter');
  cy.get('[data-test="header.cnpjSearchIssuer-input"]').type(dados.emissor);
  cy.wait('@LoadEmitter').its('response.statusCode').should('eq', 200);

  cy.get('[data-test="header.issueDate-input"]').type(dataEmissao);
  cy.get('[data-test="header.expireDate-input"]').type(dataVencimento);

  cy.get('[data-test="header.commercialNoteNumber-input"]').type(
    dados.numeroNC
  );
  cy.get('[data-test="header.commercialNoteSeries-input"]').type(dados.serieNc);

  cy.contains('Modelo de NC').click();
  cy.get('div[data-radix-select-viewport]')
    .find('span[id^="radix-"]')
    .contains(dados.nomeDaNota)
    .click();

  cy.get('[data-test="header.description-input"]').type(dados.descricaoNC);

  cy.get('[data-test="header.totalValue-input"]').type(dados.valorTotal);
  cy.get('[data-test="header.unitValue-input"]').type(dados.valorUnitario);
  cy.get('[data-test="header.quantity-input"]').type(dados.quantidade);

  cy.get('[data-test="header.feesPreFixed-input"]').type(dados.jurosPre);
  cy.get('[data-test="header.feesPostFixed-input"]').type(dados.jurosPos);

  cy.intercept(
    'GET',
    'https://hemera.backend.oke.luby.me/api/v1/zheus/dados-bancarios*'
  ).as('LoadBankData');
  cy.contains('Adicionar Conta').click();
  cy.wait('@LoadBankData').its('response.statusCode').should('eq', 200);

  cy.contains('Banco').should('exist');
  cy.get('button[id="BANCO DO BRASIL "]').click();
  cy.get('.flex.flex-col-reverse > button.bg-primary').click();

  cy.intercept(
    'GET',
    'https://hemera.backend.oke.luby.me/api/v1/zheus/avalistas-conjuges*'
  ).as('LoadGuarantorsSpouses');
  cy.intercept(
    'POST',
    'https://hemera.backend.oke.luby.me/api/v1/NotasComerciais*'
  ).as('CreateCommercialNote');

  cy.contains('Próximo').click();

  cy.wait('@CreateCommercialNote').its('response.statusCode').should('eq', 200);
  cy.wait('@LoadGuarantorsSpouses')
    .its('response.statusCode')
    .should('eq', 200);
});

/**
 * Preenche as obrigações de uma NC.
 */
Cypress.Commands.add('preencherObrigacoes', () => {
  cy.contains('Resgate Antecipado:').should('be.visible');
  cy.contains('Do atraso no pagamento e encargos moratórios:').should(
    'be.visible'
  );

  cy.get('[data-test="obligations.redeemWithPreemptiveRights"]').click();
  cy.get('[data-test="obligations.redeemWithPayment"]').click();

  cy.get('[data-test="obligations.lateInterestRate-input"]').type(dados.taxa01);
  cy.get('[data-test="obligations.contractualFine-input"]').type(dados.taxa02);
  cy.get('[data-test="obligations.proceduralCostRate-input"]').type(
    dados.taxa03
  );

  cy.intercept(
    'PUT',
    'https://hemera.backend.oke.luby.me/api/v1/NotasComerciais/**/Obrigacoes'
  ).as('UpdateObligations');
  cy.contains('Próximo').click();
  cy.wait('@UpdateObligations').its('response.statusCode').should('eq', 200);
});

/**
 * Comando para simular o envio de um fluxo de pagamento válido.
 */
Cypress.Commands.add('enviarPagamentoValido', () => {
  cy.intercept(
    'POST',
    'https://hemera.backend.oke.luby.me/api/v1/fileupload*'
  ).as('UploadFile');
  cy.get('input[type="file"]').attachFile('parcelas_amortizacao.csv');
  cy.contains('Sucesso').should('be.visible');

  cy.intercept(
    'PUT',
    'https://hemera.backend.oke.luby.me/api/v1/NotasComerciais/**/FluxosPagamentos'
  ).as('UpdatePaymentFlow');
  cy.contains('Próximo').click();
  cy.wait('@UploadFile').its('response.statusCode').should('eq', 200);
  cy.wait('@UpdatePaymentFlow').its('response.statusCode').should('eq', 200);
});

/**
 * Comando para simular o envio de um Contrato válido.
 */
Cypress.Commands.add('enviarContratoValido', () => {
  cy.get('[data-test="real-guarantee-files-input"]').attachFile(
    'garantias.csv'
  );
  cy.contains('garantias.csv').should('be.visible');
  cy.get('.slate-selectable > .relative').type(
    'Garantia ID,Descrição,Valor,Tipo,Data de Vencimento'
  );
  cy.contains('Fidejussórias').click();
});

/**
 * Comando para adicionar um avalista.
 */
Cypress.Commands.add('adicionarAvalista', () => {
  cy.contains('Adicionar Avalista').should('be.visible');
  cy.contains('Adicionar Avalista').click();
  cy.get('button.peer').eq(1).click();
  cy.get('.flex-col-reverse> :nth-child(2)').click();
  cy.contains('RUBIA DA SILVA KRUGER').should('be.visible');
});

/**
 * Comando para adicionar um cônjuge anuente.
 */
Cypress.Commands.add('adicionarConjuge', () => {
  cy.contains('Adicionar Cônjuge').click();
  cy.get('button.peer').eq(1).click();
  cy.get('.flex-col-reverse> :nth-child(2)').click();
  cy.contains('SIDNEI MARCIANO').should('be.visible');
});

/**
 * Comando para enviar a NC para aprovação.
 */
Cypress.Commands.add('enviarAprovacao', () => {
  cy.intercept(
    'PUT',
    'https://hemera.backend.oke.luby.me/api/v1/NotasComerciais/**/GarantiasFidejussorias'
  ).as('UpdateGuarantees');

  cy.contains('Enviar para aprovação').click();

  cy.wait('@UpdateGuarantees').its('response.statusCode').should('eq', 200);
  cy.contains('Sucesso').should('be.visible');
});